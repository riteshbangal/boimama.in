# This CI Workflow will build this boimama project with Github Actions
name: boimama.in CI Workflow

on:
  push:
    branches: [ "develop", "master" ]
  pull_request:
    branches: [ "develop", "master" ]

jobs:

  backend-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    # It performs additional verification steps, all in non-interactive mode. 
    # This is a common command used in continuous integration (CI) pipelines to ensure a clean build and verify the quality of the code.
    - name: Build with Maven
      if: false # This step will be skipped. 
      run: |
        cd backend 
        mvn -B clean verify
      
    - name: Run Unit Tests
      if: false # Set false to skip this step
      run: |
        cd backend
        mvn test
       
    - name: Build with Maven and JaCoCo
      if: true # Set false to skip this step
      run: |
        cd backend  
        mvn clean verify -P jacoco

    - name: Publish JaCoCo coverage report # TODO: Choose better solution. Maybe through S3 assets
      if: true # Set false to skip this step
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: backend/target/site/jacoco
  
    - name: SonarCloud Scan
      id: sonar
      uses: sonarsource/sonarcloud-github-action@master
      env:
          # GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check SonarCloud Analysis Status
      run: |
        sonar_status=$(curl -sSfL https://sonarcloud.io/api/qualitygates/project_status?projectKey=riteshbangal_boimama.in)
        if [[ "$sonar_status" == *"\"status\":\"ERROR\""* ]]; then
          echo "SonarCloud analysis failed!"
          exit 1  # Indicate failure
        else
          echo "SonarCloud analysis succeeded!"
        fi

    - name: Build Backend (Springboot Application)
      run: |
        cd backend  
        # mvn clean install -DskipTests
        mvn clean package -DskipTests # Skip Unit Tests

    - name: Setup Docker
      uses: docker/setup-buildx-action@v1

    - name: Build and Push Docker Image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        IMAGE_NAME: boimama-app
        IMAGE_TAG: 0.0.1-SNAPSHOT
      run: |
        docker build -t $IMAGE_NAME:$IMAGE_TAG -f backend/Dockerfile backend
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker tag $IMAGE_NAME:$IMAGE_TAG 314201/$IMAGE_NAME:$IMAGE_TAG
        docker push 314201/$IMAGE_NAME:$IMAGE_TAG 
    
    - name: Scan Docker image with Trivy
      env:
        IMAGE_NAME: boimama-app
        IMAGE_TAG: 0.0.1-SNAPSHOT
        TRIVY_SEVERITY: "HIGH,CRITICAL,MEDIUM"  # Set the severity level you want to fail the build on
      run: |
        cd utilities
        docker run --rm -v $(pwd):/app -w /app aquasec/trivy --format template --template "@html.tpl" --output trivy-report.html image 314201/$IMAGE_NAME:$IMAGE_TAG

    - name: Upload HTML Report of Trivy as artifact # TODO: Choose better solution. Maybe through S3 assets
      uses: actions/upload-artifact@v2
      with:
        name: trivy-report
        path: utilities/trivy-report.html

  frontend-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # TODO: Restrict more! Create Role for github-actions-user and use Role in Principal.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Upload frontend assets into AWS S3 bucket
      run: |
        cd frontend/user-portal
        chmod +x upload.sh  # Make the script executable
        ./upload.sh
  
  deploy-api-gateway:
    runs-on: ubuntu-latest
    if: false  # This job will never run. Fix the below issue and try!

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Encode API Gateway Configuration
      run: |
        ENCODED_FILE=$(base64 < api-gateway/boimama-api-development-0.0.1-SNAPSHOT.yaml | tr -d '\n')
        echo "::set-output name=ENCODED_FILE::$ENCODED_FILE"
      id: encode
    
    # This is failing due to OpenAPI 3.0 format. 
    # TODO: Validate and fix it through https://editor.swagger.io or https://editor-next.swagger.io
    - name: Import OpenAPI Specification
      run: |
        aws apigateway import-rest-api \
          --fail-on-warnings \
          --body file://api-gateway/boimama-api-development-0.0.1-SNAPSHOT.yaml
          # --body "$(echo ${{ steps.encode.outputs.ENCODED_FILE }} | base64 --decode)"
        
    - name: Deploy API Gateway
      run: |
        aws apigateway create-deployment \
          --rest-api-id fl4jogavq9 \
          --stage-name development
